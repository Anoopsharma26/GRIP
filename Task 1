**Predict the percentage of an student based on the no. of study hours.**

#Importing all the library

import pandas as pd
import numpy as np
import matplotlib.pyplot as mp
import sklearn as sk

#Reading the dat from dataset

url="https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv"
data=pd.read_csv(url)
print ("Data import succesfully")

#Head of the data

data.head(10)

#Stastistical description of Datasets

 data.describe()

#Let's plot our data points on 2-D graph to eyeball our dataset and see if we can manually find any relationship between the data. We can create the plot with the following script:



#ploting the relationship between no. of hrs study vs  marks
data.plot(x='Hours',y='Scores',style='2')
mp.title("relationship between no. of hrs study vs  marks")
mp.xlabel('Hours Studied') 
mp.ylabel('Percentage Score') 

mp.show()

#From the graph above we acan clearly see that there is a linear realtionship between the number of Hours student study and the marks obtain in the exam.*

# **Lets Prepare the Data**

X = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values 

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                            test_size=0.1, random_state=0) 

# **Train the model**


from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training complete.")

# Plotting for the test data
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
mp.scatter(X, y)
mp.plot(X, line);
mp.show()


# Making the predection

#Now that we have trained our algorithm, it's time to make some predictions.
print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df 

hours = 9.5

hours=np.array(hours).reshape(1,-1)
own_pred =regressor.predict(hours)
  
print( "No of Hours = {}".format(hours))

print("Predicted Score = {}".format(own_pred[0]))

No of Hours 9.25
Predicted Score  93.69173248737539



# Evaluating the model

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred)) 
